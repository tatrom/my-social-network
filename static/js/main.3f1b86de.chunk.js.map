{"version":3,"sources":["Components/Navbar/Navbar.module.css","Components/Profile/MyPost/MyPosts.module.css","Components/Profile/MyPost/Post/Post.module.css","Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogsItem/DialogsItem.module.css","Components/Header/Header.module.css","Components/Navbar/Users/User.module.css","Components/Navbar/Users/AllUsers.module.css","Components/Profile/Profile.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Dialogs/Message/Message.module.css","Components/Header/Header.tsx","Components/Navbar/Users/User.tsx","Components/Navbar/Users/AllUsers.tsx","Components/Navbar/Navbar.tsx","Components/Profile/MyPost/Post/Post.tsx","Redux/state.ts","Components/Profile/MyPost/MyPosts.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/Dialogs/DialogsItem/DialogsItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","App.tsx","index.tsx"],"names":["module","exports","Header","className","s","header","src","alt","User","props","user","name","date","AllUsers","users","map","el","id","Navbar","nav","to","activeClassName","active","Post","post","text","message","likes","ADD_POST","UPDATE_NEW_POST_TEXT","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","addPostActionCreator","type","sendMessageCreator","store","_state","DialogPage","messages","dialogs","newMessageBody","ProfilePage","posts","newText","Users","_callSubscriber","subscribe","callback","this","getState","dispatch","action","trim","newPost","push","body","MyPosts","newTextAreaElement","React","createRef","mypost","ref","value","newPostText","onChange","current","undefined","onKeyPress","e","key","console","log","OnKeyPressHandler","button","onClick","ProfileInfo","description","Profile","content","bind","DialogItem","dialogItem","Message","Dialogs","dialogsElements","dialogPage","dialog","messageElements","dialogsItems","placeholder","target","onKeyPressHandler","App","state","path","render","EntireTreeRender","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3f1b86de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1dWpI\",\"active\":\"Navbar_active__3b0QJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mypost\":\"MyPosts_mypost__c-Uf_\",\"button\":\"MyPosts_button__3JaKz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__-tayL\",\"text\":\"Post_text__3c3Dz\",\"likes\":\"Post_likes__2Id0C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1rZ3k\",\"dialogItems\":\"Dialogs_dialogItems__PNT3P\",\"messages\":\"Dialogs_messages__285JR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogsItem_dialogItem__2LSwQ\",\"active\":\"DialogsItem_active__3JhD6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1CGKd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__34p39\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"AllUsers_users__2F06X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__33cQd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1FWdy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__28aa8\"};","import React from 'react';\nimport s from './Header.module.css'\n\nexport const Header = () => {\n    return <div className={s.header}>\n        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSCCmV4hdR0WwQdDksdPtHdYPSGo27bnOl0dA&usqp=CAU\" alt=\"\"/>\n\n    </div>\n}","import React from \"react\";\nimport s from './User.module.css'\n\ntype UserType = {\n    id: number\n    name: string\n    date: number\n}\n\nexport function User(props: UserType) {\n    return (\n        <div className={s.user}>\n            <div>User Name:{props.name}</div>\n            <div>Date of registration:{props.date}</div>\n        </div>\n    )\n}","import React from \"react\";\nimport {User} from \"./User\";\nimport s from './AllUsers.module.css'\n\ntype UserType = {\n    id: number\n    name: string\n    date: number\n}\n\ntype AllUsersType = {\n    users: Array<UserType>\n}\n\nexport function AllUsers(props: AllUsersType) {\n    let users = props.users.map( (el) => <User id={el.id} date={el.date} name={el.name} />)\n\n    return (\n        <div className={s.users}>\n            {users}\n        </div>\n    )\n}","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Navbar.module.css'\nimport {AllUsers} from \"./Users/AllUsers\";\n\ntype UserType = {\n    id: number\n    name: string\n    date: number\n}\n\ntype NavbarType = {\n    users: Array<UserType>\n}\nexport const Navbar = (props: NavbarType) => {\n    return <div className={s.nav}>\n        <ul>\n            <li><NavLink to={\"/profile\"} activeClassName={s.active}>Profile</NavLink></li>\n            <li><NavLink to={\"/dialogs\"} activeClassName={s.active}>Messages</NavLink></li>\n            <li><NavLink to={\"/news\"} activeClassName={s.active}>News</NavLink></li>\n            <li><NavLink to={\"/music\"} activeClassName={s.active}>Music</NavLink></li>\n            <li><NavLink to={\"/settings\"} activeClassName={s.active}>Settings</NavLink></li>\n            <li>\n                <AllUsers users={props.users}/>\n            </li>\n        </ul>\n    </div>\n}","import React from 'react';\nimport s from './Post.module.css'\n\ntype PostType = {\n    id: number\n    message: string\n    likes: number\n}\nexport const Post = (props: PostType) => {\n    return (\n        <div className={s.post}>\n            <div>\n                <img\n                    src=\"https://thumbs-prod.si-cdn.com/IjbgoCcHvUa6ISjPAvS8T6DTHA8=/fit-in/1600x0/https://public-media.si-cdn.com/filer/97/2c/972c4531-0552-4a49-b51b-4cdb5066bd1d/tacc1157_05_faceright_10k_rgb.jpg\"\n                    alt=\"img\"/>\n            </div>\n            <div className={s.text}> {props.message}</div>\n            <div className={s.likes}> likes {props.likes}</div>\n        </div>\n    )\n}","export type StoreType = {\n    _state: StateType\n    _callSubscriber: () => void\n    subscribe: (callback: () => void) => void\n    getState: () => StateType\n    dispatch: (action: ActionTypes) => void\n}\n\ntype AddPostActionType = {\n    type: \"ADD-POST\"\n}\ntype ChangeNewTextActionType = {\n    type: \"UPDATE-NEW-POST-TEXT\",\n    newText: string\n}\ntype UpdateNewMessageBodyType = {\n    type: \"UPDATE-NEW-MESSAGE-BODY\",\n    body: string\n}\ntype SendMessageType = {\n    type: \"SEND-MESSAGE\"\n}\n\n\nexport type ActionTypes = AddPostActionType | ChangeNewTextActionType | UpdateNewMessageBodyType | SendMessageType\n\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\nconst UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\n\nexport const addPostActionCreator = (): ActionTypes => ({type: ADD_POST})\nexport const updateNewPostTextActionCreator = (newText: string): ActionTypes => ({\n    type: UPDATE_NEW_POST_TEXT,\n    newText: newText\n})\nexport const sendMessageCreator = (): ActionTypes => ({type: SEND_MESSAGE})\nexport const updateNewMessageBodyCreator = (text: string): ActionTypes => ({type: UPDATE_NEW_MESSAGE_BODY, body: text})\n\nexport const store: StoreType = {\n    _state: {\n        DialogPage: {\n            messages: [\n                {id: 1, message: \"Hello, i'm first message\"},\n                {id: 2, message: \"Hello, I'm second message\"},\n                {id: 3, message: \"Hello, I'm third message\"},\n                {id: 4, message: \"Hello, I'm fourth message\"},\n            ],\n            dialogs: [\n                {id: 1, name: \"Anna\"},\n                {id: 1, name: \"Roman\"},\n                {id: 1, name: \"Renat\"},\n                {id: 1, name: \"Anatoly\"}\n            ],\n            newMessageBody: \"\"\n        },\n        ProfilePage: {\n            posts: [\n                {id: 1, message: \"Its a first post\", likes: 3},\n                {id: 2, message: \"Its a second post\", likes: 3},\n                {id: 3, message: \"Its a third post\", likes: 3},\n                {id: 4, message: \"Its a fourth post\", likes: 3},\n                {id: 5, message: \"Its a fifth post\", likes: 3},\n            ],\n            newText: \"\"\n\n        },\n        Users: {\n            users: [\n                {id: 1, name: \"Roman\", date: 2020},\n                {id: 2, name: \"Elena\", date: 2019},\n                {id: 3, name: \"Sergey\", date: 2018},\n                {id: 4, name: \"Vlad\", date: 2020}\n            ]\n        }\n\n    },\n    _callSubscriber() {\n\n    },\n    subscribe(callback) {\n        this._callSubscriber = callback;\n    },\n    getState() {\n        return this._state\n    },\n    dispatch(action) {\n        if (action.type === ADD_POST) {\n            let text = this._state.ProfilePage.newText.trim()\n            if (text) {\n                let newPost: PostType = {\n                    id: 1,\n                    message: text,\n                    likes: 5\n                }\n                this._state.ProfilePage.posts.push(newPost);\n                this._state.ProfilePage.newText = '';\n                this._callSubscriber();\n            }\n        } else if (action.type === UPDATE_NEW_POST_TEXT) {\n            this._state.ProfilePage.newText = action.newText;\n            this._callSubscriber()\n        } else if (action.type === UPDATE_NEW_MESSAGE_BODY) {\n            this._state.DialogPage.newMessageBody = action.body;\n            this._callSubscriber()\n        } else if (action.type === SEND_MESSAGE) {\n            let body = this._state.DialogPage.newMessageBody;\n            this._state.DialogPage.newMessageBody = '';\n            this._state.DialogPage.messages.push({id: 6, message: body})\n            this._callSubscriber()\n        }\n    }\n}\n\ntype PostType = {\n    id: number\n    message: string\n    likes: number\n}\n\ntype DialogsType = {\n    id: number\n    name: string\n}\n\ntype MessagesType = {\n    id: number\n    message: string\n\n}\n\ntype UserType = {\n    id: number\n    name: string\n    date: number\n}\nexport type DialogPageType = {\n    messages: Array<MessagesType>\n    dialogs: Array<DialogsType>\n    newMessageBody: string\n}\n\ntype ProfilePageType = {\n    posts: Array<PostType>\n    newText: string\n}\n\ntype UsersType = {\n    users: Array<UserType>\n}\n\nexport type StateType = {\n    DialogPage: DialogPageType\n    ProfilePage: ProfilePageType\n    Users: UsersType\n}","import React, {KeyboardEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\nimport {ActionTypes, addPostActionCreator, updateNewPostTextActionCreator} from \"../../../Redux/state\";\n\ntype PostType = {\n    id: number\n    message: string\n    likes: number\n}\n\ntype MyPostType = {\n    posts: Array<PostType>\n    dispatch: (action: ActionTypes) => void\n    newPostText: string\n}\n\n\nexport const MyPosts = (props: MyPostType) => {\n    let posts = props.posts.map( (el) => <Post id={el.id} message={el.message} likes={el.likes} />)\n    let newTextAreaElement = React.createRef<HTMLTextAreaElement>()\n\n    function addPost() {\n        props.dispatch(addPostActionCreator())\n    }\n\n    const UpdateText = () => {\n        let text = newTextAreaElement.current?.value\n        if ( text !== undefined ) {\n        props.dispatch(updateNewPostTextActionCreator(text))\n        }\n    }\n\n    let OnKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement> ) => {\n        e.key === \"Enter\" && props.dispatch(addPostActionCreator())\n        console.log(e.key)\n    }\n    return (\n        <div className={s.mypost}>\n            <textarea ref={newTextAreaElement}  value={props.newPostText} onChange={UpdateText} onKeyPress={ (e) => OnKeyPressHandler(e)}/>\n            <button className={s.button} onClick={addPost}>Add post</button>\n            <div className={s.posts}>\n                {posts}\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport s from './ProfileInfo.module.css'\n\nexport function ProfileInfo() {\n    return (\n        <div>\n            <div>\n                <img\n                    src=\"https://st2.depositphotos.com/1606672/5285/i/600/depositphotos_52852189-stock-photo-recreational-entrepreneur-man-with-laptop.jpg\"\n                    alt=\"img\"/>\n            </div>\n            <div className={s.description}>ava + description</div>\n        </div>\n    )\n}","import React from 'react';\nimport s from './Profile.module.css'\nimport {MyPosts} from \"./MyPost/MyPosts\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {ActionTypes} from \"../../Redux/state\";\n\ntype PostType = {\n    id: number\n    message: string\n    likes: number\n}\ntype ProfileType = {\n    posts: Array<PostType>\n    dispatch: (action: ActionTypes) => void\n    newPostText: string\n}\nexport const Profile = (props: ProfileType) => {\n    return (\n        <div className={s.content}>\n            <ProfileInfo/>\n            <MyPosts posts={props.posts} dispatch={props.dispatch.bind(props.dispatch)} newPostText={props.newPostText}/>\n        </div>\n    )\n}\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from \"./DialogsItem.module.css\";\n\ntype DialogItemType = {\n    name: string\n}\n\nexport const DialogItem = (props: DialogItemType) => {\n    return (\n        <div className={s.dialogItem}>\n            <NavLink to={'/dialogs/'} className={s.dialogItem}>{props.name}</NavLink>\n        </div>\n    )\n}\n","import s from \"./Message.module.css\";\nimport React from \"react\";\n\n\ntype MessageType = {\n    message: string\n}\n\nexport const Message = (props: MessageType) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport s from './Dialogs.module.css'\nimport {DialogItem} from './DialogsItem/DialogsItem';\nimport {Message} from \"./Message/Message\";\nimport {ActionTypes, DialogPageType, sendMessageCreator, updateNewMessageBodyCreator} from \"../../Redux/state\";\n\n\ntype DialogsType = {\n    dialogPage: DialogPageType\n    dispatch: (action: ActionTypes) => void\n\n}\nexport const Dialogs = (props: DialogsType) => {\n\n    let dialogsElements = props.dialogPage.dialogs.map(dialog => <DialogItem name={dialog.name}/>);\n    let messageElements = props.dialogPage.messages.map(message => <Message message={message.message}/>);\n    let newMessageBody = props.dialogPage.newMessageBody;\n\n    let onSendMessageClick = () => {\n        props.dispatch(sendMessageCreator());\n    }\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let body = e.target.value;\n        props.dispatch(updateNewMessageBodyCreator(body))\n\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\")\n            props.dispatch(sendMessageCreator())\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messageElements}</div>\n                <div>\n                    <div><textarea value={newMessageBody}\n                                   placeholder='Enter your message'\n                                   onChange={onNewMessageChange}\n                                   onKeyPress={e =>onKeyPressHandler(e)}\n                    /></div>\n                    <div>\n                        <button onClick={onSendMessageClick}>Send</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport {Header} from \"./Components/Header/Header\";\nimport {Navbar} from \"./Components/Navbar/Navbar\";\nimport {Profile} from \"./Components/Profile/Profile\";\nimport {Dialogs} from \"./Components/Dialogs/Dialogs\";\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {StateType, StoreType} from \"./Redux/state\";\n\n\n// type PostType = {\n//     id: number\n//     message: string\n//     likes: number\n// }\n//\n// type DialogsType = {\n//     id: number\n//     name: string\n// }\n//\n// type MessagesType = {\n//     id: number\n//     message: string\n//\n// }\n//\n// type UserType = {\n//     id: number\n//     name: string\n//     date: number\n// }\n\ntype AppPropsType = {\n    store: StoreType;\n}\n\nfunction App(props: AppPropsType) {\n    const state = props.store.getState();\n    return (\n\n        <div className=\"App\">\n            <Header/>\n            <Navbar users={state.Users.users}/>\n            <div className={\"App_content\"}>\n                <Route path=\"/profile\" render={() => <Profile posts={state.ProfilePage.posts}\n                                                              dispatch={props.store.dispatch.bind(props.store)}\n                                                              newPostText={state.ProfilePage.newText}/>}/>\n                <Route path=\"/dialogs\" render={() => <Dialogs dialogPage={state.DialogPage}\n                                                              dispatch={props.store.dispatch.bind(props.store)}/>}/>\n                <Route path=\"/news\"/>\n                <Route path=\"/music\"/>\n                <Route path=\"/settings\"/>\n                {/*<Route render={() => <Profile posts={state.ProfilePage.posts}*/}\n                {/*                              dispatch={props.store.dispatch.bind(props.store)}*/}\n                {/*                              newPostText={state.ProfilePage.newText}/>}/>*/}\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './Redux/state'\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nfunction EntireTreeRender() {\n    ReactDOM.render(\n        <BrowserRouter>\n            <App store={store}/>\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n}\nEntireTreeRender()\nstore.subscribe(EntireTreeRender);\n"],"sourceRoot":""}