{"version":3,"sources":["Components/common/FormsControls/FormsControls.module.css","Components/common/FormsControls/FormsControls.tsx","Utils/validators/validators.ts","Components/Profile/Profile.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPost/MyPosts.module.css","Components/Profile/MyPost/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPost/Post/Post.tsx","Components/Profile/MyPost/MyPosts.tsx","Components/Profile/MyPost/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","requiredField","value","maxLengthCreator","maxLength","length","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","ProfileInfo","profile","Preloader","photo","photos","small","large","userImg","src","width","alt","UpdateStatus","Post","post","text","message","likes","maxLength10","MyPosts","React","memo","posts","map","el","id","AddPostReduxForm","onSubmit","postText","addPost","newPostBody","reduxForm","form","handleSubmit","Field","placeholder","component","name","validate","MyPostsContainer","connect","state","ProfilePage","dispatch","Profile","content","ProfileContainer","userId","this","match","params","getUserProfile","SetStatus","Component","compose","isAuth","Auth","setUserProfile","withRouter"],"mappings":"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","file":"static/js/4.91f6469a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Arzz\",\"error\":\"FormsControls_error__1ZLMY\",\"formSummaryError\":\"FormsControls_formSummaryError__3q8eY\"};","import s from './FormsControls.module.css'\nimport React from \"react\";\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props} ><input {...input} {...props} {...restProps}/></FormControl>\n}\n\n","export const requiredField = (value: string) => {\n\n    if (value) {\n        return undefined;\n    }\n\n    return 'Filed is required'\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value.length > maxLength) return `Max length is ${maxLength}`\n\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__33cQd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1FWdy\",\"userImg\":\"ProfileInfo_userImg__3Lm_R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mypost\":\"MyPosts_mypost__c-Uf_\",\"button\":\"MyPosts_button__3JaKz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__-tayL\",\"text\":\"Post_text__3c3Dz\",\"likes\":\"Post_likes__2Id0C\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (title: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n\n    }\n    return (\n        <>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>{props.status || '------'}</span>\n            </div>\n            }{editMode &&\n        <div>\n            <input autoFocus={true} onBlur={deactivateEditMode}\n                   value={status} onChange={onStatusChange}/>\n        </div>\n        }\n        </>\n    )\n}","import React from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileType} from \"../../../Redux/profile-reducer\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null\n    status: string\n    UpdateStatus: (status: string) => void\n}\n\nexport function ProfileInfo(props: ProfileInfoPropsType) {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    let photo = props.profile.photos.small !== null ? props.profile.photos.small : props.profile.photos.large\n    return (\n        <div>\n            <div className={s.userImg}>\n                {photo !== null &&\n                <img src={props.profile.photos.large} width='100' alt={'img'}/>}\n            </div>\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.UpdateStatus}/>\n        </div>\n    )\n}","import React from 'react';\nimport s from './Post.module.css'\n\ntype PostType = {\n    id: number\n    message: string\n    likes: number\n}\nexport const Post = (props: PostType) => {\n    return (\n        <div className={s.post}>\n            <div>\n                <img\n                    src=\"https://thumbs-prod.si-cdn.com/IjbgoCcHvUa6ISjPAvS8T6DTHA8=/fit-in/1600x0/https://public-media.si-cdn.com/filer/97/2c/972c4531-0552-4a49-b51b-4cdb5066bd1d/tacc1157_05_faceright_10k_rgb.jpg\"\n                    alt=\"img\"/>\n            </div>\n            <div className={s.text}> {props.message}</div>\n            <div className={s.likes}> likes {props.likes}</div>\n        </div>\n    )\n}","import React from 'react';\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from '../../../Utils/validators/validators';\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\ntype PostType = {\n    id: number\n    message: string\n    likes: number\n}\n\ntype MyPostType = {\n    posts: Array<PostType>\n    addPost: (postText: string) => void\n}\n\ntype FormDataType = {\n    newPostBody: string\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\nexport const MyPosts = React.memo((props: MyPostType) => {\n\n    let posts = props.posts.map((el, id) => <Post key={id} id={el.id} message={el.message} likes={el.likes}/>)\n\n    function addPost(postText: FormDataType) {\n        props.addPost(postText.newPostBody)\n    }\n\n    return (<>\n            <AddPostReduxForm onSubmit={addPost}/>\n            <div className={s.posts}>\n                {posts}\n            </div>\n        </>\n    )\n})\n\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field placeholder={'Post message'} component={Textarea} name={'newPostBody'}\n                   validate={[requiredField, maxLength10]}/>\n            <button>Add post</button>\n        </form>\n    )\n}\n\nconst AddPostReduxForm = reduxForm<FormDataType>({\n    form: 'profileAddPostForm'\n})(AddPostForm)","import {addPost, ProfileReducerType, updateNewPostText} from \"../../../Redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {RootStateType} from \"../../../Redux/redux-store\";\n\n\nlet MapStateToStore = (state: RootStateType) => {\n    return {\n        posts: state.ProfilePage.posts,\n    }\n}\nlet MapDispatchToStore = (dispatch: (action: ProfileReducerType) => void) => {\n    return {\n        addPost: (postText: string) => {\n            dispatch(addPost(postText))\n        }\n\n    }\n}\n\nexport const MyPostsContainer = connect(MapStateToStore, MapDispatchToStore)(MyPosts)\n","import React from 'react';\nimport s from './Profile.module.css'\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPost/MyPostsContainer\";\nimport {ProfileType} from \"../../Redux/profile-reducer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    UpdateStatus: (status: string) => void\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n    return (\n        <div className={s.content}>\n            <ProfileInfo profile={props.profile} status={props.status} UpdateStatus={props.UpdateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n","import React, {ComponentType} from 'react';\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {RootStateType} from \"../../Redux/redux-store\";\nimport {ProfileType, SetStatus, setUserProfile, UpdateStatus} from \"../../Redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {getUserProfile} from \"../../Redux/auth-reducer\";\nimport {compose} from \"redux\";\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    isAuth: boolean\n    status: string\n}\n\ntype MapDispatchPropsType = {\n    setUserProfile: (profile: ProfileType) => void\n    getUserProfile: (userId: string) => void\n    SetStatus: (userId: string) => void\n    UpdateStatus: (status: string) => void\n}\ntype PathParamsType = {\n    userId: string\n}\n\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\n\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = '14575'\n        }\n        this.props.getUserProfile(userId)\n        this.props.SetStatus(userId)\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile profile={this.props.profile} status={this.props.status}\n                         UpdateStatus={this.props.UpdateStatus}/>\n            </div>\n        )\n    }\n\n}\n\nlet mapStateToProps = (state: RootStateType) => {\n    return {\n        profile: state.ProfilePage.profile\n        ,\n        isAuth: state.Auth.isAuth\n        ,\n        status: state.ProfilePage.status\n    }\n}\n\nexport default compose<ComponentType>(connect(mapStateToProps, {\n    setUserProfile,\n    getUserProfile,\n    SetStatus,\n    UpdateStatus\n}), withRouter)(ProfileContainer)"],"sourceRoot":""}