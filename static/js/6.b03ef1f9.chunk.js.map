{"version":3,"sources":["Components/common/FormsControls/FormsControls.module.css","Components/common/FormsControls/FormsControls.tsx","Utils/validators/validators.ts","Components/Login/Login.tsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","requiredField","value","maxLengthCreator","maxLength","length","maxLength100","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","placeholder","name","component","validate","type","captcha","src","alt","style","formSummaryError","connect","state","isAuth","Auth","userId","captchaUrl","login","to","formData","email","password","rememberMe"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iJCMrHC,G,KAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACpEC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,IAA5D,UACI,8BACKC,IAEJC,GAAY,+BAAOF,SAKnBM,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD8C,YACxBS,EADwB,mBAE5D,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAwB,oDAAcC,GAAWC,QAG/CC,EAAqC,SAACH,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD2C,YACrBS,EADqB,mBAEzD,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAyB,6DAAWC,GAAWD,GAAWE,S,iCC1BrE,oEAAO,IAAME,EAAgB,SAACC,GAE1B,IAAIA,EAIJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,GACAA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,M,uICgBpDE,EAAeH,YAAiB,KAyBhCI,EAAiBC,YAA4C,CAC/DC,KAAM,SADaD,EAvB+E,SAACX,GACnG,OACI,uBAAMa,SAAUb,EAAMc,aAAtB,UACI,8BAAK,cAAC,IAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,UAAWd,IAChDe,SAAU,CAACd,IAAeK,OAEtC,8BAAK,cAAC,IAAD,CAAOM,YAAa,WAAYC,KAAM,WAAYG,KAAM,WAAYF,UAAWd,IACxEe,SAAU,CAACd,IAAeK,OACtC,gCAAK,cAAC,IAAD,CAAOU,KAAM,WAAYH,KAAM,aAAcC,UAAWd,MAA7D,iBAGCH,EAAMoB,SAAW,qBAAKC,IAAKrB,EAAMoB,QAASE,IAAK,YAC/CtB,EAAMoB,SAAW,cAAC,IAAD,CAAOL,YAAa,qBAAsBC,KAAM,UAAWC,UAAWd,MACxF,qBAAKP,UAAW2B,IAAMC,iBAAtB,SACKxB,EAAMP,QAEX,8BACI,mDAgCDgC,uBARS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBE,OAAQH,EAAME,KAAKC,OACnBC,WAAYJ,EAAME,KAAKE,cAIS,CAACC,WAA1BN,EAtBD,SAACzB,GAIX,OAAIA,EAAM2B,OACC,cAAC,IAAD,CAAUK,GAAI,aAEjB,gCACA,uCACA,cAACtB,EAAD,CAAgBG,SARP,SAACoB,GACdjC,EAAM+B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASb,UAOrCA,QAASpB,EAAM8B","file":"static/js/6.b03ef1f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Arzz\",\"error\":\"FormsControls_error__1ZLMY\",\"formSummaryError\":\"FormsControls_formSummaryError__3q8eY\"};","import s from './FormsControls.module.css'\nimport React from \"react\";\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props} ><input {...input} {...props} {...restProps}/></FormControl>\n}\n\n","export const requiredField = (value: string) => {\n\n    if (value) {\n        return undefined;\n    }\n\n    return 'Filed is required'\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value)\n    if (value.length > maxLength) return `Max length is ${maxLength}`\n\n    return undefined;\n}","import React from \"react\";\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\nimport {Input} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, requiredField} from \"../../Utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../Redux/auth-reducer\";\nimport {RootStateType} from \"../../Redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\nimport style from '../common/FormsControls/FormsControls.module.css'\n\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\ntype LoginPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n    isAuth: boolean,\n    captchaUrl: string | null\n}\ntype LoginFormPropsType = {\n    captcha: string | null\n}\n\nconst maxLength100 = maxLengthCreator(100)\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormPropsType> & LoginFormPropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div><Field placeholder={'email'} name={'email'} component={Input}\n                        validate={[requiredField, maxLength100]}/>\n            </div>\n            <div><Field placeholder={'password'} name={'password'} type={'password'} component={Input}\n                        validate={[requiredField, maxLength100]}/></div>\n            <div><Field type={'checkbox'} name={'rememberMe'} component={Input}/>\n                remember me\n            </div>\n            {props.captcha && <img src={props.captcha} alt={'captcha'}/>}\n            {props.captcha && <Field placeholder={'Symbols from image'} name={'captcha'} component={Input}/>}\n            <div className={style.formSummaryError}>\n                {props.error}\n            </div>\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({\n    form: 'login'\n})(LoginForm)\n\nconst Login = (props: LoginPropsType) => {\n    const onSubmit = (formData: FormDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n    }\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n    return (<div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit} captcha={props.captchaUrl}/>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootStateType) => {\n    return {\n        isAuth: state.Auth.isAuth,\n        userId: state.Auth.userId,\n        captchaUrl: state.Auth.captchaUrl\n    }\n}\n\nexport default connect(mapStateToProps, {login})(Login)"],"sourceRoot":""}