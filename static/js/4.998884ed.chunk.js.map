{"version":3,"sources":["Components/common/FormsControls/FormsControls.module.css","Components/common/FormsControls/FormsControls.tsx","Utils/validators/validators.ts","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/Profile.module.css","Components/Profile/MyPost/MyPosts.module.css","Components/Profile/MyPost/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/Contact/Contact.tsx","Components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPost/Post/Post.tsx","Components/Profile/MyPost/MyPosts.tsx","Components/Profile/MyPost/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","requiredField","value","maxLengthCreator","maxLength","length","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","Contact","contactTitle","contactValue","contact","ProfileDataFormReduxForm","reduxForm","form","profile","onSubmit","handleSubmit","style","formSummaryError","Field","placeholder","name","component","type","Object","keys","contacts","map","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","alt","mainPhoto","target","files","initialValues","then","Post","post","text","message","likes","maxLength10","MyPosts","React","memo","posts","el","id","AddPostReduxForm","postText","addPost","newPostBody","validate","MyPostsContainer","connect","state","ProfilePage","dispatch","Profile","content","UpdateStatus","setPhoto","ProfileContainer","userId","this","match","params","getUserProfile","SetStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","isAuth","Auth","setUserProfile","withRouter"],"mappings":"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","file":"static/js/4.998884ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Arzz\",\"error\":\"FormsControls_error__1ZLMY\",\"formSummaryError\":\"FormsControls_formSummaryError__3q8eY\"};","import s from './FormsControls.module.css'\nimport React from \"react\";\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props} ><input {...input} {...props} {...restProps}/></FormControl>\n}\n\n","export const requiredField = (value: string) => {\n\n    if (value) {\n        return undefined;\n    }\n\n    return 'Filed is required'\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value)\n    if (value.length > maxLength) return `Max length is ${maxLength}`\n\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1FWdy\",\"userImg\":\"ProfileInfo_userImg__3Lm_R\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1uFrv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__33cQd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mypost\":\"MyPosts_mypost__c-Uf_\",\"button\":\"MyPosts_button__3JaKz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__-tayL\",\"text\":\"Post_text__3c3Dz\",\"likes\":\"Post_likes__2Id0C\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (title: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n\n    }\n    return (\n        <>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>{props.status || '------'}</span>\n            </div>\n            }{editMode &&\n        <div>\n            <input autoFocus={true} onBlur={deactivateEditMode}\n                   value={status} onChange={onStatusChange}/>\n        </div>\n        }\n        </>\n    )\n}","import React from \"react\";\nimport s from \"../ProfileInfo.module.css\";\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n\n}","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from '../ProfileInfo.module.css'\nimport style from '../../../common/FormsControls/FormsControls.module.css'\nimport {ProfileType} from \"../../../../Redux/profile-reducer\";\nimport {Input} from \"../../../common/FormsControls/FormsControls\";\n\n\ntype ProfileDataFormPropsType = {\n    profile: ProfileType\n}\n\n\n const ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({\n                                                                                                                                   profile,\n                                                                                                                                   error,\n                                                                                                                                   ...props\n                                                                                                                               }) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <button>save</button>\n            </div>\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>}\n            <div>\n                <b>Full name</b>: <Field placeholder={'Full name'} name={'fullName'} component={Input}/>\n            </div>\n            <div>\n                <b>Looking for a job:</b><Field placeholder={'looking for a job'} name={'lookingForAJob'}\n                                                type={'checkbox'} component={Input}/>\n            </div>\n            <div><b>Looking for a job description</b>: <Field placeholder={'Looking for a job description'}\n                                                              name={'lookingForAJobDescription'} component={Input}/>\n            </div>\n            <div>\n                <b>About me:</b> <Field placeholder={'About me'} name={'aboutMe'} component={Input}/>\n            </div>\n            <div>\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\n                return <div className={s.contact} key={key}>\n                    <b>{key}: <Field placeholder={key} name={`contacts.${key}`} component={Input}/></b>\n                </div>\n            })}\n            </div>\n        </form>\n    )\n}\n\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\";\nimport s from './ProfileInfo.module.css';\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\nimport {Contact} from \"./Contact/Contact\";\nimport {ProfileType} from \"../../../Redux/profile-reducer\";\nimport userPhoto from '../../../assets/images.jpeg'\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    isOwner: boolean\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<void>\n}\n\nconst ProfileInfo: React.FC<ProfilePropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n    const [editMode, setEditMode] = useState(false)\n    if (!profile) {\n        // eslint-disable-next-line react/jsx-no-undef\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (profile: ProfileType) => {\n        saveProfile(profile).then(() => {\n            setEditMode(false)\n        })\n    }\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} alt=\"\" className={s.mainPhoto}/>\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\n                {editMode ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit} profile={profile}/> :\n                    <ProfileData profile={profile} isOwner={isOwner} goToEditMode={setEditMode}/>}\n                <div>\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: (editMode: boolean) => void\n}\n\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <div>\n            {isOwner && <div>\n                <button onClick={() => goToEditMode(true)}>edit</button>\n            </div>}\n            <div>\n                <b>Full name</b>: {profile.fullName}\n            </div>\n            <div>\n                <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\n            </div>\n            {profile.lookingForAJob &&\n            <div>\n                <b>My professional skills</b> : {profile.lookingForAJobDescription}\n            </div>}\n            <div>\n                <b>About me:</b> {profile.aboutMe}\n            </div>\n            <div>\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n            })}\n            </div>\n        </div>\n    )\n}\n\n\nexport default ProfileInfo;","import React from 'react';\nimport s from './Post.module.css'\n\ntype PostType = {\n    id: number\n    message: string\n    likes: number\n}\nexport const Post = (props: PostType) => {\n    return (\n        <div className={s.post}>\n            <div>\n                <img\n                    src=\"https://thumbs-prod.si-cdn.com/IjbgoCcHvUa6ISjPAvS8T6DTHA8=/fit-in/1600x0/https://public-media.si-cdn.com/filer/97/2c/972c4531-0552-4a49-b51b-4cdb5066bd1d/tacc1157_05_faceright_10k_rgb.jpg\"\n                    alt=\"img\"/>\n            </div>\n            <div className={s.text}> {props.message}</div>\n            <div className={s.likes}> likes {props.likes}</div>\n        </div>\n    )\n}","import React from 'react';\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from '../../../Utils/validators/validators';\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\ntype PostType = {\n    id: number\n    message: string\n    likes: number\n}\n\ntype MyPostType = {\n    posts: Array<PostType>\n    addPost: (postText: string) => void\n}\n\ntype FormDataType = {\n    newPostBody: string\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\nexport const MyPosts = React.memo((props: MyPostType) => {\n\n    let posts = props.posts.map((el, id) => <Post key={id} id={el.id} message={el.message} likes={el.likes}/>)\n\n    function addPost(postText: FormDataType) {\n        props.addPost(postText.newPostBody)\n    }\n\n    return (<>\n            <AddPostReduxForm onSubmit={addPost}/>\n            <div className={s.posts}>\n                {posts}\n            </div>\n        </>\n    )\n})\n\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field placeholder={'Post message'} component={Textarea} name={'newPostBody'}\n                   validate={[ maxLength10]}/>\n            <button>Add post</button>\n        </form>\n    )\n}\n\nconst AddPostReduxForm = reduxForm<FormDataType>({\n    form: 'profileAddPostForm'\n})(AddPostForm)","import {addPost, ProfileReducerType, updateNewPostText} from \"../../../Redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {RootStateType} from \"../../../Redux/redux-store\";\n\n\nlet MapStateToStore = (state: RootStateType) => {\n    return {\n        posts: state.ProfilePage.posts,\n    }\n}\nlet MapDispatchToStore = (dispatch: (action: ProfileReducerType) => void) => {\n    return {\n        addPost: (postText: string) => {\n            dispatch(addPost(postText))\n        }\n\n    }\n}\n\nexport const MyPostsContainer = connect(MapStateToStore, MapDispatchToStore)(MyPosts)\n","import React from 'react';\nimport s from './Profile.module.css'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPost/MyPostsContainer\";\nimport {ProfileType} from \"../../Redux/profile-reducer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    isOwner: boolean\n    UpdateStatus: (status: string) => void\n    setPhoto: (photo: File) => void\n    saveProfile: (profile: ProfileType) => Promise<void>\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n    return (\n        <div className={s.content}>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.UpdateStatus}\n                         isOwner={props.isOwner} savePhoto={props.setPhoto} saveProfile={props.saveProfile}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n","import React, {ComponentType} from 'react';\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {RootStateType} from \"../../Redux/redux-store\";\nimport {\n    ProfileType,\n    saveProfile,\n    setPhoto,\n    setStatus,\n    SetStatus,\n    setUserProfile,\n    UpdateStatus\n} from \"../../Redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {getUserProfile} from \"../../Redux/auth-reducer\";\nimport {compose} from \"redux\";\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    isAuth: boolean\n    status: string\n}\n\ntype MapDispatchPropsType = {\n    setUserProfile: (profile: ProfileType) => void\n    getUserProfile: (userId: string) => void\n    SetStatus: (userId: string) => void\n    UpdateStatus: (status: string) => void\n    setStatus: (status: string) => void\n    setPhoto: (photo: File) => void\n    saveProfile: (profile: ProfileType) => Promise<void>\n}\ntype PathParamsType = {\n    userId: string\n}\n\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\n\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = '14575'\n        }\n        this.props.getUserProfile(userId)\n        this.props.SetStatus(userId)\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.setStatus('')\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile profile={this.props.profile} status={this.props.status}\n                         UpdateStatus={this.props.UpdateStatus} isOwner={!this.props.match.params.userId} setPhoto={this.props.setPhoto} saveProfile={this.props.saveProfile}/>\n            </div>\n        )\n    }\n\n}\n\nlet mapStateToProps = (state: RootStateType) => {\n    return {\n        profile: state.ProfilePage.profile\n        ,\n        isAuth: state.Auth.isAuth\n        ,\n        status: state.ProfilePage.status\n    }\n}\n\nexport default compose<ComponentType>(connect(mapStateToProps, {\n    setUserProfile,\n    getUserProfile,\n    SetStatus,\n    UpdateStatus,\n    setStatus,\n    setPhoto,\n    saveProfile\n}), withRouter)(ProfileContainer)"],"sourceRoot":""}