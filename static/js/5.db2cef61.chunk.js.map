{"version":3,"sources":["Components/common/FormsControls/FormsControls.module.css","Components/common/FormsControls/FormsControls.tsx","Utils/validators/validators.ts","Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogsItem/DialogsItem.module.css","Components/Dialogs/Message/Message.module.css","Components/Dialogs/DialogsItem/DialogsItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","requiredField","value","maxLengthCreator","maxLength","length","DialogItem","dialogItem","to","name","Message","message","maxLength100","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","compose","WithAuthRedirect","connect","state","dialogPage","DialogPage","isAuth","Auth","dispatch","sendMessage","SendMessageAC","dialogsElements","dialogs","map","dialog","id","messageElements","messages","dialogsItems","values","newMessageBody"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iJCMrHC,G,KAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACpEC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,IAA5D,UACI,8BACKC,IAEJC,GAAY,+BAAOF,SAKnBM,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD8C,YACxBS,EADwB,mBAE5D,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAwB,oDAAcC,GAAWC,QAG/CC,EAAqC,SAACH,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD2C,YACrBS,EADqB,mBAEzD,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAyB,6DAAWC,GAAWD,GAAWE,S,iCC1BrE,oEAAO,IAAME,EAAgB,SAACC,GAE1B,IAAIA,EAIJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,GACAA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,M,oBCV1DnB,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,4B,oBCA3GD,EAAOC,QAAU,CAAC,WAAa,gCAAgC,OAAS,8B,oBCAxED,EAAOC,QAAU,CAAC,QAAU,2B,6GCOfoB,EAAa,SAACT,GACvB,OACI,qBAAKJ,UAAWC,IAAEa,WAAlB,SACI,cAAC,IAAD,CAASC,GAAI,YAAaf,UAAWC,IAAEa,WAAvC,SAAoDV,EAAMY,U,kBCHzDC,EAAU,SAACb,GACpB,OACI,qBAAKJ,UAAWC,IAAEiB,QAAlB,SAA4Bd,EAAMc,W,2CCWpCC,EAAeT,YAAiB,KAuChCU,EAAsBC,YAAwB,CAChDC,KAAM,wBADkBD,EAXsC,SAACjB,GAC/D,OACI,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACI,8BAAK,cAACC,EAAA,EAAD,CAAOC,UAAWvB,IAAUa,KAAM,iBAAkBW,SAAU,CAACnB,IAAeW,OACnF,8BACI,kD,wBC7BDS,sBAAuBC,IAAkBC,aAblC,SAACC,GACnB,MAAO,CACHC,WAAYD,EAAME,WAClBC,OAAQH,EAAMI,KAAKD,WAIF,SAACE,GACtB,MAAO,CACHC,YAAa,SAACnB,GAAD,OAAqBkB,EAASE,YAAcpB,SAIlDU,EDFQ,SAACxB,GAEpB,IAAImC,EAAkBnC,EAAM4B,WAAWQ,QAAQC,KAAI,SAACC,EAAQC,GAAT,OAAgB,cAAC,EAAD,CAAqB3B,KAAM0B,EAAO1B,MAAjB2B,MAChFC,EAAkBxC,EAAM4B,WAAWa,SAASJ,KAAI,SAACvB,EAASyB,GAAV,OAAiB,cAAC,EAAD,CAAkBzB,QAASA,EAAQA,SAArByB,MAEnF,IAAKvC,EAAM8B,OACP,OAAO,cAAC,IAAD,CAAUnB,GAAI,WAOzB,OACI,sBAAKf,UAAWC,IAAEuC,QAAlB,UACI,qBAAKxC,UAAWC,IAAE6C,aAAlB,SACKP,IAEL,qBAAKvC,UAAWC,IAAE4C,SAAlB,SACI,8BAAMD,MAEV,cAACxB,EAAD,CAAqBG,SAZH,SAACwB,GACvB3C,EAAMiC,YAAYU,EAAOC","file":"static/js/5.db2cef61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Arzz\",\"error\":\"FormsControls_error__1ZLMY\",\"formSummaryError\":\"FormsControls_formSummaryError__3q8eY\"};","import s from './FormsControls.module.css'\nimport React from \"react\";\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props} ><input {...input} {...props} {...restProps}/></FormControl>\n}\n\n","export const requiredField = (value: string) => {\n\n    if (value) {\n        return undefined;\n    }\n\n    return 'Filed is required'\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value)\n    if (value.length > maxLength) return `Max length is ${maxLength}`\n\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1rZ3k\",\"dialogItems\":\"Dialogs_dialogItems__PNT3P\",\"messages\":\"Dialogs_messages__285JR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogsItem_dialogItem__2LSwQ\",\"active\":\"DialogsItem_active__3JhD6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__28aa8\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from \"./DialogsItem.module.css\";\n\ntype DialogItemType = {\n    name: string\n}\n\nexport const DialogItem = (props: DialogItemType) => {\n    return (\n        <div className={s.dialogItem}>\n            <NavLink to={'/dialogs/'} className={s.dialogItem}>{props.name}</NavLink>\n        </div>\n    )\n}\n","import s from \"./Message.module.css\";\nimport React from \"react\";\n\n\ntype MessageType = {\n    message: string\n}\n\nexport const Message = (props: MessageType) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport s from './Dialogs.module.css'\nimport {DialogItem} from './DialogsItem/DialogsItem';\nimport {Message} from \"./Message/Message\";\nimport {DialogPageType} from \"../../Redux/dialog-reducer\";\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, requiredField} from \"../../Utils/validators/validators\";\nimport {Redirect} from \"react-router-dom\";\n\n\ntype DialogsType = {\n    isAuth: boolean\n    dialogPage: DialogPageType\n    sendMessage: (message: string) => void\n}\n\ntype FormDataType = {\n    newMessageBody: string\n}\n\nconst maxLength100 = maxLengthCreator(100)\n\nexport const Dialogs = (props: DialogsType) => {\n\n    let dialogsElements = props.dialogPage.dialogs.map((dialog, id) => <DialogItem key={id} name={dialog.name}/>);\n    let messageElements = props.dialogPage.messages.map((message, id) => <Message key={id} message={message.message}/>);\n\n    if (!props.isAuth) {\n        return <Redirect to={'/login'}/>\n    }\n\n    const addMessageHandler = (values: FormDataType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messageElements}</div>\n            </div>\n            <AddMessageFormRedux onSubmit={addMessageHandler}/>\n        </div>\n    )\n}\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div><Field component={Textarea} name={'newMessageBody'} validate={[requiredField, maxLength100]}/></div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm<FormDataType>({\n    form: 'dialogAddMessageForm'\n})(AddMessageForm)\n","import {\n    DialogReducerType,\n    SendMessageAC,\n} from \"../../Redux/dialog-reducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {RootStateType} from \"../../Redux/redux-store\";\nimport {compose} from \"redux\";\nimport {ComponentType} from \"react\";\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\n\n\nlet MapStateToStore = (state: RootStateType) => {\n    return {\n        dialogPage: state.DialogPage,\n        isAuth: state.Auth.isAuth\n    }\n}\n\nlet MapDispatchToProps = (dispatch: (action: DialogReducerType) => void) => {\n    return {\n        sendMessage: (message: string) => dispatch(SendMessageAC(message))\n    }\n}\n\nexport default compose<ComponentType>(WithAuthRedirect, connect(MapStateToStore, MapDispatchToProps))(Dialogs)"],"sourceRoot":""}